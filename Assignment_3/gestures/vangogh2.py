# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([1.04, 4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.181514, [3, -0.36, 0], [3, 1.30667, 0]], [0.0872665, [3, -1.30667, 0], [3, 0.44, 0]], [0.0872665, [3, -0.44, 0], [3, 0.72, 0]], [0.0872665, [3, -0.72, 0], [3, 0.306667, 0]], [0.0331613, [3, -0.306667, 2.39268e-09], [3, 0.266667, -2.08059e-09]], [0.0331613, [3, -0.266667, 0], [3, 0.12, 0]], [0.0331613, [3, -0.12, 0], [3, 0.173333, 0]], [0.0331613, [3, -0.173333, 0], [3, 0.586667, 0]], [0.0331613, [3, -0.586667, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([1.04, 4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[-0.299649, [3, -0.36, 0], [3, 1.30667, 0]], [-0.331613, [3, -1.30667, 0], [3, 0.44, 0]], [0.715585, [3, -0.44, 0], [3, 0.72, 0]], [0.715585, [3, -0.72, 0], [3, 0.306667, 0]], [-0.136136, [3, -0.306667, 0], [3, 0.266667, 0]], [-0.136136, [3, -0.266667, 0], [3, 0.12, 0]], [-0.136136, [3, -0.12, 0], [3, 0.173333, 0]], [-0.136136, [3, -0.173333, 0], [3, 0.586667, 0]], [-0.136136, [3, -0.586667, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([1.04, 2.32, 3.4, 3.6, 4.08, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[-0.755728, [3, -0.36, 0], [3, 0.426667, 0]], [-1.10828, [3, -0.426667, 0.143571], [3, 0.36, -0.121138]], [-1.54985, [3, -0.36, 0], [3, 0.0666667, 0]], [-1.54985, [3, -0.0666667, 0], [3, 0.16, 0]], [-1.54985, [3, -0.16, 0], [3, 0.733333, 0]], [-1.20428, [3, -0.733333, 0], [3, 0.72, 0]], [-1.20428, [3, -0.72, 0], [3, 0.306667, 0]], [-0.610865, [3, -0.306667, 0], [3, 0.266667, 0]], [-0.610865, [3, -0.266667, 0], [3, 0.12, 0]], [-0.610865, [3, -0.12, 0], [3, 0.173333, 0]], [-0.610865, [3, -0.173333, 0], [3, 0.586667, 0]], [-0.610865, [3, -0.586667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([1.04, 2.32, 3.4, 3.6, 4.08, 4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[-1.69471, [3, -0.36, 0], [3, 0.426667, 0]], [-0.671952, [3, -0.426667, 0], [3, 0.36, 0]], [-0.718276, [3, -0.36, 0], [3, 0.0666667, 0]], [-0.718276, [3, -0.0666667, 0], [3, 0.16, 0]], [-0.718276, [3, -0.16, 0], [3, 0.293333, 0]], [-0.830557, [3, -0.293333, 0.0315225], [3, 0.44, -0.0472838]], [-0.954695, [3, -0.44, 0], [3, 0.72, 0]], [-0.954695, [3, -0.72, 0], [3, 0.306667, 0]], [-0.954695, [3, -0.306667, 0], [3, 0.266667, 0]], [-0.954695, [3, -0.266667, 0], [3, 0.12, 0]], [-0.954695, [3, -0.12, 0], [3, 0.173333, 0]], [-0.954695, [3, -0.173333, 0], [3, 0.586667, 0]], [-0.954695, [3, -0.586667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([1.04, 1.92, 2.2, 2.32, 2.84, 3.4, 3.6, 4.08, 4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.37, [3, -0.36, 0], [3, 0.293333, 0]], [0.98, [3, -0.293333, 0], [3, 0.0933333, 0]], [0.98, [3, -0.0933333, 0], [3, 0.04, 0]], [0.09, [3, -0.04, 0], [3, 0.173333, 0]], [0.12, [3, -0.173333, 0], [3, 0.186667, 0]], [0.09, [3, -0.186667, 0], [3, 0.0666667, 0]], [0.89, [3, -0.0666667, 0], [3, 0.16, 0]], [0.89, [3, -0.16, 0], [3, 0.293333, 0]], [0.98, [3, -0.293333, 0], [3, 0.44, 0]], [0.98, [3, -0.44, 0], [3, 0.72, 0]], [0.98, [3, -0.72, 0], [3, 0.306667, 0]], [0.9, [3, -0.306667, 0], [3, 0.266667, 0]], [0.9, [3, -0.266667, 0], [3, 0.12, 0]], [0.9, [3, -0.12, 0], [3, 0.173333, 0]], [0.9, [3, -0.173333, 0], [3, 0.586667, 0]], [0.9, [3, -0.586667, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([1.04, 2.32, 3.4, 3.6, 4.08, 4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[1.24442, [3, -0.36, 0], [3, 0.426667, 0]], [0.954695, [3, -0.426667, 0], [3, 0.36, 0]], [0.989719, [3, -0.36, 0], [3, 0.0666667, 0]], [0.989719, [3, -0.0666667, 0], [3, 0.16, 0]], [0.989719, [3, -0.16, 0], [3, 0.293333, 0]], [-0.532325, [3, -0.293333, 0], [3, 0.44, 0]], [0.0331613, [3, -0.44, 0], [3, 0.72, 0]], [0.0331613, [3, -0.72, 0], [3, 0.306667, 0]], [1.43292, [3, -0.306667, 0], [3, 0.266667, 0]], [1.43292, [3, -0.266667, 0], [3, 0.12, 0]], [1.43292, [3, -0.12, 0], [3, 0.173333, 0]], [1.43292, [3, -0.173333, 0], [3, 0.586667, 0]], [1.43292, [3, -0.586667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.0383972, [3, -1.66667, 0], [3, 0.44, 0]], [0.431096, [3, -0.44, -2.03436e-08], [3, 0.72, 3.32895e-08]], [0.431096, [3, -0.72, 0], [3, 0.306667, 0]], [0.171042, [3, -0.306667, 0], [3, 0.266667, 0]], [0.171042, [3, -0.266667, 0], [3, 0.12, 0]], [0.171042, [3, -0.12, 0], [3, 0.173333, 0]], [0.171042, [3, -0.173333, 0], [3, 0.586667, 0]], [0.171042, [3, -0.586667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([2.32, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[-0.68766, [3, -0.786667, 0], [3, 1.32, 0]], [-1.07687, [3, -1.32, 0], [3, 0.72, 0]], [-1.07687, [3, -0.72, 0], [3, 0.306667, 0]], [-1.07687, [3, -0.306667, 0], [3, 0.266667, 0]], [-1.07687, [3, -0.266667, 0], [3, 0.12, 0]], [-1.07687, [3, -0.12, 0], [3, 0.173333, 0]], [-1.07687, [3, -0.173333, 0], [3, 0.586667, 0]], [-1.07687, [3, -0.586667, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([1.04, 2.32, 3.4, 3.6, 4.08, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.962086, [3, -0.36, 0], [3, 0.426667, 0]], [1.09956, [3, -0.426667, -0.0848062], [3, 0.36, 0.0715552]], [1.43117, [3, -0.36, 0], [3, 0.0666667, 0]], [1.43117, [3, -0.0666667, 0], [3, 0.16, 0]], [1.43117, [3, -0.16, 0], [3, 1.45333, 0]], [1.45529, [3, -1.45333, -0.0015038], [3, 0.306667, 0.000317316]], [1.4556, [3, -0.306667, 0], [3, 0.266667, 0]], [1.13621, [3, -0.266667, 0], [3, 0.12, 0]], [1.4556, [3, -0.12, 0], [3, 0.173333, 0]], [1.13621, [3, -0.173333, 0.0699254], [3, 0.586667, -0.236671]], [0.535816, [3, -0.586667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([1.04, 2.32, 3.4, 3.6, 4.08, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.884882, [3, -0.36, 0], [3, 0.426667, 0]], [0.432842, [3, -0.426667, 0], [3, 0.36, 0]], [0.79587, [3, -0.36, 0], [3, 0.0666667, 0]], [0.79587, [3, -0.0666667, 0], [3, 0.16, 0]], [0.79587, [3, -0.16, 0], [3, 1.45333, 0]], [1.12318, [3, -1.45333, -0.0204007], [3, 0.306667, 0.00430473]], [1.12748, [3, -0.306667, 0], [3, 0.266667, 0]], [1.12748, [3, -0.266667, 0], [3, 0.12, 0]], [1.12748, [3, -0.12, 0], [3, 0.173333, 0]], [1.12748, [3, -0.173333, 0], [3, 0.586667, 0]], [1.12748, [3, -0.586667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([1.04, 1.92, 2.2, 2.32, 2.84, 3.4, 3.6, 4.08, 4.96, 6.28, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.68, [3, -0.36, 0], [3, 0.293333, 0]], [0.95, [3, -0.293333, -0.0314285], [3, 0.0933333, 0.00999999]], [0.96, [3, -0.0933333, 0], [3, 0.04, 0]], [0.02, [3, -0.04, 0], [3, 0.173333, 0]], [0.21, [3, -0.173333, 0], [3, 0.186667, 0]], [0.1, [3, -0.186667, 0], [3, 0.0666667, 0]], [0.8, [3, -0.0666667, 0], [3, 0.16, 0]], [0.8, [3, -0.16, 0], [3, 0.293333, 0]], [0.96, [3, -0.293333, 0], [3, 0.44, 0]], [0.96, [3, -0.44, 0], [3, 0.72, 0]], [0.96, [3, -0.72, 0], [3, 0.306667, 0]], [0.1, [3, -0.306667, 0], [3, 0.266667, 0]], [0.92, [3, -0.266667, 0], [3, 0.12, 0]], [0.1, [3, -0.12, 0], [3, 0.173333, 0]], [0.92, [3, -0.173333, 0], [3, 0.586667, 0]], [0.92, [3, -0.586667, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([2.32, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[0.904081, [3, -0.786667, 0], [3, 2.04, 0]], [0.90408, [3, -2.04, 0], [3, 0.306667, 0]], [0.90408, [3, -0.306667, -2.37414e-08], [3, 0.266667, 2.06447e-08]], [0.904081, [3, -0.266667, 0], [3, 0.12, 0]], [0.90408, [3, -0.12, 0], [3, 0.173333, 0]], [0.904081, [3, -0.173333, 0], [3, 0.586667, 0]], [0.904081, [3, -0.586667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([2.32, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[-0.300268, [3, -0.786667, 0], [3, 2.04, 0]], [-0.300268, [3, -2.04, 0], [3, 0.306667, 0]], [-0.300268, [3, -0.306667, 0], [3, 0.266667, 0]], [-0.300268, [3, -0.266667, 0], [3, 0.12, 0]], [-0.300268, [3, -0.12, 0], [3, 0.173333, 0]], [-0.300268, [3, -0.173333, 0], [3, 0.586667, 0]], [-0.300268, [3, -0.586667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([1.04, 2.32, 8.44, 9.36, 10.16, 10.52, 11.04, 12.8])
keys.append([[1.20682, [3, -0.36, 0], [3, 0.426667, 0]], [1.33343, [3, -0.426667, 0], [3, 2.04, 0]], [1.33343, [3, -2.04, 0], [3, 0.306667, 0]], [1.33343, [3, -0.306667, 0], [3, 0.266667, 0]], [1.33343, [3, -0.266667, 0], [3, 0.12, 0]], [1.33343, [3, -0.12, 0], [3, 0.173333, 0]], [1.33343, [3, -0.173333, 0], [3, 0.586667, 0]], [1.33343, [3, -0.586667, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  # motion = ALProxy("ALMotion", IP, 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err
